:toc: macro
toc::[]

== [navy]#Introduction#
This project tries to bring structure for developers that are using MvvmCross and Xamarin to develop their mobile applications.

Excalibur achieves this by using Generics for a lot of boiler plating that you tend to write when developing using Xamarin. Excalibur currently has accelerators for Xamarin Native and Xamarin.Forms (MvvmCross based). Custom implementations for other frameworks can be developed using the Excalibur.Shared.

NOTE: Excalibur framework can target Native and forms projects. Please go to https://github.com/Xciles/Excalibur[Excalibur github site] and play with the samples provided.

== [navy]#Requeriments#

=== Windows
    - Windows 10
    - Latest Visual Studio Community 2017+
    - x86 processor to run Android Emulator. If AMD processor is used, you should try another emulator such https://www.genymotion.com[Geny motion].
    
    
++++
<table>
<thead>
<tr>
<th></th>
<th>Recommended</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Operating System</strong></td>
<td>Windows 10</td>
<td>The minimum operating system version is Windows 7. Xamarin.Forms UWP support requires Windows 10.</td>
</tr>
<tr>
<td><strong>Xamarin.iOS</strong></td>
<td>iOS 10 SDK (installed on a Mac)</td>
<td class="">To build iOS projects on Windows requires:<ul><li>Visual Studio 2017, and</li><li>a Mac computer, <a href="../../ios/get-started/installation/windows/connecting-to-mac/index" data-linktype="relative-path">network-accessible</a> from the Windows computer, that conforms to the minimum requirements for running Xamarin on macOS.</li></ul></td>
</tr>
<tr>
<td><strong>Xamarin.Android</strong></td>
<td>Android 6.0 / API level 23</td>
<td>You can still target older Android versions while using the latest SDK, or you can build against older versions of the SDK if required.</td>
</tr>
<tr>
<td><strong>Xamarin.Forms</strong></td>
<td></td>
<td><ul><li>Xamarin.Forms apps for iOS and Android can be deployed to the relevant platforms as described above.</li><li>Using Visual Studio also means you can test apps for the Universal Windows Platform (on Windows 10) directly on the development computer.</li></ul></td>
</tr>
<tr>
<td><strong>Xamarin.Mac</strong></td>
<td></td>
<td>Xamarin.Mac projects (macOS desktop apps) can be opened in Visual Studio and compiled to check for errors, but Mac applications cannot currently be built for distribution in Visual Studio. See the release notes on <a href="https://developer.xamarin.com/releases/vs/xamarin.vs_4/xamarin.vs_4.2/#Xamarin.Mac_minimum_support." data-linktype="external">Xamarin.Mac support</a> for more information about the limitations of Mac projects in Visual Studio.</td>
</tr>
</tbody>
</table>

++++

=== Mac
- Latest Visual Studio for Mac

++++
<table>
<thead>
<tr>
<th></th>
<th>Recommended</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong class="">Operating System</strong></td>
<td>macOS Sierra</td>
<td>The minimum required version is macOS Sierra (10.12)</td>
</tr>
<tr>
<td><strong>Xamarin.iOS</strong></td>
<td>iOS 11 SDK</td>
<td>The iOS that ships with Xcode 9</td>
</tr>
<tr>
<td><strong>Xamarin.Android</strong></td>
<td>Android 6.0 / API level 23</td>
<td>You can still target older Android versions while using the latest SDK, or you can build against older versions of the SDK if required.</td>
</tr>
<tr>
<td><strong>Xamarin.Forms</strong></td>
<td></td>
<td><ul><li>Xamarin.Forms apps built on macOS can include iOS, Android, and macOS projects, subject to the SDK requirements above.</li><li>Xamarin.Forms projects for Windows/UWP cannot be built on macOS.</li></ul></td>
</tr>
<tr>
<td><strong>Xamarin.Mac</strong></td>
<td>OS X El Capitan (10.11) SDK</td>
<td>The OS X El Capitan SDK ships with Xcode 7.2; macOS SDKs ship with Xcode 8.</td>
</tr>
</tbody>
</table>

++++

== [navy]#Project types#

=== [navy]#Portable Class Library (PCL)#


IMPORTANT: Portable Class Libraries have been deprecated in the latest version of Visual Studio, and .NET Standard Libraries are recommended instead. Also, there's a PCL Excalibur version to make the framework backwards compatible.


PCL projects target specific profiles that support a known set of BCL classes/features. However, the down side to PCL is that they often require extra architectural effort to separate profile specific code into their own libraries.

When you create an Application Project or a Library Project, the resulting DLL is restricted to working on the specific platform it is created for. This prevents you from writing an assembly for a Windows app, and then re-using it on Xamarin.iOS and Xamarin.Android.

This includes profiles that are combinations of:

- .NET 4 or .NET 4.5
- Silverlight 5
- Windows Phone 8
- UWP apps

Benefits

Centralized code sharing â€“ write and test code in a single project that can be consumed by other libraries or applications.
Refactoring operations will affect all code loaded in the solution (the Portable Class Library and the platform-specific projects).
The PCL project can be easily referenced by other projects in a solution, or the output assembly can be shared for others to reference in their solutions.
Disadvantages

Because the same Portable Class Library is shared between multiple applications, platform-specific libraries cannot be referenced (eg. Community.CsharpSqlite.WP7).
The Portable Class Library subset may not include classes that would otherwise be available in both MonoTouch and Mono for Android (such as DllImport or System.IO.File).


[[img-t-architecture]]
.PCL Architecture sample
image::images/pcl_sample.png["PCL architecture sample", width="750", link="images/pcl_sample.png"]


=== [navy]#.NET Standard#

NOTE: New Xamarin projects allow to select by default .Net Standard libraries in the latest version of Visual Studio. Now Excalibur framework uses by default this type of libraries. Excalibur Xamarin Forms template is built under this type of libraries.

_.NET Standard libraries_ have a uniform API for all .NET Platforms including Xamarin and .NET Core. Create a single .NET Standard Library and use it from any runtime that supports the .NET Standard Platform. 


The .NET Standard enables the following key scenarios:

- Defines uniform set of BCL APIs for all .NET implementations to implement, independent of workload.
- Enables developers to produce portable libraries that are usable across .NET implementations, using this same set of APIs.
- Reduces or even eliminates conditional compilation of shared source due to .NET APIs, only for OS APIs.


[[img-t-architecture]]
.NET Standard diagram
image::images/dotnet-standard.png[".NET Standard architecture sample", width="750", link="images/dotnet-standard.png"]

=== [navy]#.NET Standard Compatibility#

The next chart shows the different .Net Standard versions compatibility with the different .NET frameworks:

++++

<table>
<thead>
<tr>
<th>.NET Standard</th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.0.md" data-linktype="external">1.0</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.1.md" data-linktype="external">1.1</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.2.md" data-linktype="external">1.2</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.3.md" data-linktype="external">1.3</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.4.md" data-linktype="external">1.4</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.5.md" data-linktype="external">1.5</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md" data-linktype="external">1.6</a></th>
<th><a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md" data-linktype="external">2.0</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>.NET Core</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
</tr>
<tr>
<td>.NET Framework <sup>1</sup></td>
<td>4.5</td>
<td>4.5</td>
<td>4.5.1</td>
<td>4.6</td>
<td>4.6.1</td>
<td>4.6.1</td>
<td>4.6.1</td>
<td>4.6.1</td>
</tr>
<tr>
<td>Mono</td>
<td>4.6</td>
<td>4.6</td>
<td>4.6</td>
<td>4.6</td>
<td>4.6</td>
<td>4.6</td>
<td>4.6</td>
<td>5.4</td>
</tr>
<tr>
<td>Xamarin.iOS</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.14</td>
</tr>
<tr>
<td>Xamarin.Mac</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.0</td>
<td>3.8</td>
</tr>
<tr>
<td>Xamarin.Android</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>7.0</td>
<td>8.0</td>
</tr>
<tr>
<td>Universal Windows Platform</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0</td>
<td>10.0.16299</td>
<td>10.0.16299</td>
<td>10.0.16299</td>
</tr>
<tr>
<td>Windows</td>
<td>8.0</td>
<td>8.0</td>
<td>8.1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Windows Phone</td>
<td>8.1</td>
<td>8.1</td>
<td>8.1</td>
<td></td>
<td></td>
<td class=""></td>
<td></td>
<td class=""></td>
</tr>
<tr>
<td>Windows Phone Silverlight</td>
<td>8.0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

++++

NOTE: This chart is important in order to make you select the most apropiate  .NET standard version for your librares and reuse them on other projects.

== [navy]#The MVVM Pattern#

In order to create scalable Xamarin applications, you should make use of the MVVM Pattern. Excalibur framework helps to accelerate the speed of MVVM pattern implementation.

There are three core components in the MVVM pattern: the model, the view, and the view model. Each serves a distinct purpose. Figure 2-1 shows the relationships between the three components.

[[img-t-architecture]]
.MVVM pattern diagram
image::images/mvvm.png[".NET Standard architecture sample", width="750", link="images/mvvm.png"]


The benefits of using the MVVM pattern are as follows:

- If there's an existing model implementation that encapsulates existing business logic, it can be difficult or risky to change it. In this scenario, the view model acts as an adapter for the model classes and enables you to avoid making any major changes to the model code.
- Developers can create unit tests for the view model and the model, without using the view. The unit tests for the view model can exercise exactly the same functionality as used by the view.
- The app UI can be redesigned without touching the code, provided that the view is implemented entirely in XAML. Therefore, a new version of the view should work with the existing view model.
- Designers and developers can work independently and concurrently on their components during the development process. Designers can focus on the view, while developers can work on the view model and model components.

== [navy]#View#
The view is responsible for defining the structure, layout, and appearance of what the user sees on screen. Ideally, each view is defined in XAML, with a limited code-behind that does not contain business logic. However, in some cases, the code-behind might contain UI logic that implements visual behavior that is difficult to express in XAML, such as animations.

In a Xamarin.Forms application, a view is typically a Page-derived or ContentView-derived class. However, views can also be represented by a data template, which specifies the UI elements to be used to visually represent an object when it's displayed. A data template as a view does not have any code-behind, and is designed to bind to a specific view model type.

== [navy]#ViewModel#
The view model implements properties and commands to which the view can data bind to, and notifies the view of any state changes through change notification events. The properties and commands that the view model provides define the functionality to be offered by the UI, but the view determines how that functionality is to be displayed.

The view model is also responsible for coordinating the view's interactions with any model classes that are required. There's typically a one-to-many relationship between the view model and the model classes. The view model might choose to expose model classes directly to the view so that controls in the view can data bind directly to them. In this case, the model classes will need to be designed to support data binding and change notification events.

Each view model provides data from a model in a form that the view can easily consume. To accomplish this, the view model sometimes performs data conversion. Placing this data conversion in the view model is a good idea because it provides properties that the view can bind to. For example, the view model might combine the values of two properties to make it easier for display by the view.

In order for the view model to participate in two-way data binding with the view, its properties must raise the PropertyChanged event. View models satisfy this requirement by implementing the INotifyPropertyChanged interface, and raising the PropertyChanged event when a property is changed.

For collections, the view-friendly ObservableCollection<T> is provided. This collection implements collection changed notification, relieving the developer from having to implement the INotifyCollectionChanged interface on collections.

== [navy]#Model#
Model classes are non-visual classes that encapsulate the app's data. Therefore, the model can be thought of as representing the app's domain model, which usually includes a data model along with business and validation logic. Examples of model objects include data transfer objects (DTOs), Plain Old CLR Objects (POCOs), and generated entity and proxy objects.

Model classes are typically used in conjunction with services or repositories that encapsulate data access and caching.


== [navy]#MVVMCross#

The excalibur framework is based on MVVM Cross. Plase read documentation before starting an Excalibur project.



== [navy]#Excalibur#

Excalibur frameworks works over MVVMCross framework. That's is you can use the power of MVVMCross with the acceleration part from Excalibur. 

Excalibur framework use the MVVM Pattern (well known on Xamarin stack). Excalibur framework gives support to 

- Xamarin Native applications (Android/iOS/UWP)
- Xamarin Forms

OASP4X is aimed in Xarin Forms in order to reuse the designed views and speed up the development process.


=== [navy]#Layer specification#

[[img-t-architecture]]
.Excalibur forms solution tree
image::images/solution_tree.png["Excalibur forms solution tree", width="250", link="images/solution_tree.png"]

==== [navy]#Business#
Manages data within the app
Saving
Retrieving
Updating
Manages Application state
Uses services to retrieve and update data
Publish (pub/sub) entities when updated

==== [navy]#Domain#

Just a tiny entity used for saving data and service communication

==== [navy]#Observable#

Observable entities
A Domain entity with extended properties and Notifications
Used by ViewModels and Views instead of Domain

==== [navy]#Presentation#
Manages observable instances
Used for sharing the same observable instances between ViewModels
Subscribes (pub/sub) on certain entities
Uses Mappers to map Models to Observables

==== [navy]#Service#
Communication with a back-end
Used by the Business
May have its own entity for data transfer (instead of Domain)

==== [navy]#View Models#

Manages navigation
Manages language bindings
Views use the ViewModel Observables for binding


=== [navy]#App.cs Class#
In each deployed Excalibur/MvvmCross application there are two key classes which control how your app starts:

- the App class in the core project - which provides the initialization for your core business logic and your viewmodels.
- the Setup class in the native UI project - this Setup is a bootstrapper for the MvvmCross system and for your app.


Typically App.cs provides only initialization of:

[source, c#]
----
        public override void Initialize()
        {
            base.Initialize();

            CreatableTypes()
               .EndingWith("Service")
               .AsInterfaces()
               .RegisterAsLazySingleton();

            RegisterAppStart<LoginViewModel>();
        }

----

- within the Assembly containing the App
- find all creatable Types - meaning:
- with public constuctors
- not marked abstract
- find the interfaces they implement
- lazily register these types as singletons - meaning:
- that no instance will be created until one is requested
- that once the first instance has been created, then that - same instance will be returned for all subsequent requests


At this point, yopu can register the MVVM artifacts automatically. 

For example: 

    - The view : LoginPage.xaml/.cs (In the xaml file you can refere the name space of the view model)
    - The model: LoginViewModel.cs
    - The Service: LoginService.cs
    - The observable: Login.cs
    
    
==== [navy]#Dependency Injection#    

Excalibur use the Xamarin.IoC component to implement the inverision of control. In order to register the instance of your classes, override the method _RegisterDependencies_ on App.cs Class:

[source, c#]
----
        public override void RegisterDependencies()
        {
            // Application Things
            Container.RegisterSingle<IApplicationState, ApplicationState>();
            Container.RegisterSingle<ISyncService, SyncService>();
            ...
        }
----

* _Container_ is the IoC class (Excalibur's SimpleContainer class) that register your class.

* In this method you can register the application services, domain objects, business objects, observable objects... Please play with https://github.com/oasp/oasp4x/tree/develop/Samples/Standard/MyThaiStar[My Thai Star sample] in order to discover Excalibur's life cicle.


=== [navy]#StorageDomain Class#
The _StorageDomain_ class can be used for local database operations on the device. It's very useful to store local data such user preferences, auth tokens, item kart...

==== [navy]#How to use#

If you want to work with _StorageDomain_ class just inherit your class from _StorageDomain_. For example:

[source, c#]
----
    public class Todo : StorageDomain<int>
    {
        public int UserId { get; set; }
        public string Title { get; set; }
        public bool Completed { get; set; }
    }
----

- The methods:
    
    * UpdateFromServiceAsync(): Updates the storage entities using a <see cref="IServiceBase{T}"/>. Afterwards this should publish a message to all subscribers
    
    *  PublishFromStorageAsync: Gets data to notify subscribers. Entities should be loaded (if needed) from storage, not from services.
    
    * Sample to save data on a view model:
    **  await Resolver.Resolve<IListBusiness<int, Domain.User>>().UpdateFromServiceAsync();
    
    * Sample to load data on a view model:
    ** if (!Observables.Any())
            {
                Resolver.Resolve<IListBusiness<int, Domain.Todo>>().PublishFromStorageAsync();
            }
        }




== [navy]#External links#



https://github.com/Xciles/Excalibur[Excalibur framework home]

https://docs.microsoft.com/en-us/xamarin/cross-platform/app-fundamentals/pcl?tabs=windows[PCL fundamentals]

https://docs.microsoft.com/en-us/xamarin/cross-platform/app-fundamentals/net-standard?tabs=windows[.NET Standard fundamentals]

https://www.mvvmcross.com[MVVMCross]

https://www.mvvmcross.com/documentation/advanced/customizing-using-App-and-Setup[MVVMCross setup]